##### EventTarget 接口
* 概述
DOM 的事件操作（监听和触发），都定义在EventTarget接口。所有节点对象都部署了这个接口，其他一些需要事件通信的浏览器内置对象（比如，XMLHttpRequest、AudioNode、AudioContext）也部署了这个接口。
该接口主要提供三个实例方法。
addEventListener：绑定事件的监听函数
removeEventListener：移除事件的监听函数
dispatchEvent：触发事件

* EventTarget.addEventListener()
EventTarget.addEventListener()用于在当前节点或对象上，定义一个特定事件的监听函数。一旦这个事件发生，就会执行监听函数。该方法没有返回值。
`target.addEventListener(type, listener[, useCapture]);`
该方法接受三个参数。

type：事件名称，大小写敏感。
listener：监听函数。事件发生时，会调用该监听函数。
useCapture：布尔值，表示监听函数是否在捕获阶段（capture）触发（参见后文《事件的传播》部分），默认为false（监听函数只在冒泡阶段被触发）。该参数可选。
```
function hello() {
  console.log('Hello world');
}

var button = document.getElementById('btn');
button.addEventListener('click', hello, false);
```
这是一个在时间冒泡阶段监听事件

* EventTarget.removeEventListener()
EventTarget.removeEventListener方法用来移除addEventListener方法添加的事件监听函数。该方法没有返回值。

```
div.addEventListener('click', listener, false);
div.removeEventListener('click', listener, false);
```

##### EventTarget.dispatchEvent()
EventTarget.dispatchEvent方法在当前节点上触发指定事件，从而触发监听函数的执行。该方法返回一个布尔值，只要有一个监听函数调用了Event.preventDefault()，则返回值为false，否则为true。

#### 事件模型
##### 监听函数

浏览器的事件模型，就是通过监听函数（listener）对事件做出反应。事件发生后，浏览器监听到了这个事件，就会执行对应的监听函数。这是事件驱动编程模式（event-driven）的主要编程方式。
JavaScript 有三种方法，可以为事件绑定监听函数。

* HTML 的 on- 属性

```
<body onload="doSomething()">
<div onclick="console.log('触发事件')">
```

一旦指定的事件发生，on-属性的值是原样传入 JavaScript 引擎执行。因此如果要执行函数，不要忘记加上一对圆括号。
使用这个方法指定的监听代码，只会在冒泡阶段触发。

```
<div onClick="console.log(2)">
  <button onClick="console.log(1)">点击</button>
</div>
```
上面代码中，button是div的子元素。button的click事件，也会触发div的click事件。由于on-属性的监听代码，只在冒泡阶段触发，所以点击结果是先输出1，再输出2，即事件从子元素开始冒泡到父元素。

* 元素节点的事件属性

使用这个方法指定的监听函数，也是只会在冒泡阶段触发。

注意，这种方法与 HTML 的on-属性的差异是，它的值是函数名（doSomething），而不像后者，必须给出完整的监听代码（doSomething()）
* EventTarget.addEventListener()
所有 DOM 节点实例都有addEventListener方法，用来为该节点定义事件的监听函数。
window.addEventListener('load', doSomething, false);

```
window.onload = doSomething;

div.onclick = function (event) {
  console.log('触发事件');
};
```

##### Event 对象
事件发生以后，会产生一个事件对象，作为参数传给监听函数。浏览器原生提供一个Event对象，所有的事件都是这个对象的实例，或者说继承了Event.prototype对象。
Event对象本身就是一个构造函数，可以用来生成新的实例
`event = new Event(type, options);`

Event构造函数接受两个参数。第一个参数type是字符串，表示事件的名称；第二个参数options是一个对象，表示事件对象的配置。该对象主要有下面两个属性。
* bubbles：布尔值，可选，默认为false，表示事件对象是否冒泡。
* cancelable：布尔值，可选，默认为false，表示事件是否可以被取消，即能否用Event.preventDefault()取消这个事件。一旦事件被取消，就好像从来没有发生过，不会触发浏览器对该事件的默认行为。

```
var ev = new Event(
  'look',
  {
    'bubbles': true,
    'cancelable': false
  }
);
document.dispatchEvent(ev);
```
上面代码新建一个look事件实例，然后使用dispatchEvent方法触发该事件
[更多关于Event对象](https://wangdoc.com/javascript/events/event.html)

##### 鼠标事件
鼠标事件指与鼠标相关的事件，继承了MouseEvent接口。具体的事件主要有以下一些。

* click：按下鼠标（通常是按下主按钮）时触发。
* dblclick：在同一个元素上双击鼠标时触发。
* mousedown：按下鼠标键时触发。
* mouseup：释放按下的鼠标键时触发。
* mousemove：当鼠标在一个节点内部移动时触发。当鼠标持续移动时，该事件会连续触发。为了避免性能问题，建议对该事件的监听函数做一些限定，比如限定一段时间内只能运行一次。
* mouseenter：鼠标进入一个节点时触发，进入子节点不会触发这个事件（详见后文）。
* mouseover：鼠标进入一个节点时触发，进入子节点会再一次触发这个事件（详见后文）。
* mouseout：鼠标离开一个节点时触发，离开父节点也会触发这个事件（详见后文）。
* mouseleave：鼠标离开一个节点时触发，离开父节点不会触发这个事件（详见后文）。
* contextmenu：按下鼠标右键时（上下文菜单出现前）触发，或者按下“上下文菜单键”时触发。
* wheel：滚动鼠标的滚轮时触发，该事件继承的是WheelEvent接口。

[更多鼠标事件](https://wangdoc.com/javascript/events/mouse.html)
[键盘事件](https://wangdoc.com/javascript/events/keyboard.html)
[进度事件](https://wangdoc.com/javascript/events/progress.html)
[表单事件](https://wangdoc.com/javascript/events/form.html)
[触摸事件](https://wangdoc.com/javascript/events/touch.html)
[拖拉事件](https://wangdoc.com/javascript/events/drag.html)
